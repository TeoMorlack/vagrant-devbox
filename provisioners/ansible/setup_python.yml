---
- name: Setup env vars
  ansible.builtin.blockinfile:
    dest: "/home/vagrant/.bashrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: python env vars"
    block: |
      export PYTHONDONTWRITEBYTECODE=1

- name: Setup pyenv
  block:
    - name: Check if pyenv is installed
      ansible.builtin.shell: command -v "{{ pyenv_executable }}" >/dev/null 2>&1
      register: pyenv_installed
  rescue:
    - name: Install development packages necessary for building Python
      ansible.builtin.apt:
        pkg:
        - build-essential
        - libssl-dev
        - zlib1g-dev
        - libbz2-dev
        - libreadline-dev
        - libsqlite3-dev
        - curl
        - libncurses5-dev
        - libncursesw5-dev
        - xz-utils
        - tk-dev
        - libxml2-dev
        - libxmlsec1-dev
        - libffi-dev
        - liblzma-dev
        - git
        - wget
        - llvm
        - python3-openssl
        state: present
      become: true

    - name: Download pyenv installer
      ansible.builtin.get_url:
        url: https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer
        dest: /tmp/pyenv-installer
        mode: '+x'

    - name: Execute the pyenv installer
      ansible.builtin.shell: /tmp/pyenv-installer

    - name: Remove the pyenv installer
      file:
        path: /tmp/pyenv-installer
        state: absent

    - name: Setup pyenv bashrc
      ansible.builtin.blockinfile:
        dest: "/home/vagrant/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: pyenv"
        block: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          if command -v pyenv 1>/dev/null 2>&1; then
            eval "$(pyenv init -)"
            eval "$(pyenv virtualenv-init -)"
          fi

    - name: Install python via pyenv
      ansible.builtin.shell: |
        "{{ pyenv_executable }}" install 3.11
        "{{ pyenv_executable }}" global 3.11
      register:
        pyenv_installed

- name: Register pyenv executables
  when: pyenv_installed.rc == 0
  block:
    - name: Set pip executable
      ansible.builtin.shell: "{{ pyenv_executable }} which pip"
      register: pyenv_pip_executable

    - name: Set python executable
      ansible.builtin.shell: "{{ pyenv_executable }} which python"
      register: pyenv_python_executable

- name: Setup pipx
  when: pyenv_installed.rc == 0
  block:
    - name: Check if pipx is installed
      ansible.builtin.shell: "{{ pyenv_python_executable.stdout }} -m pipx --version"
      register: pipx_installed
  rescue:
    - name: Install pipx
      ansible.builtin.pip:
        name: pipx
        executable: "{{ pyenv_pip_executable.stdout }}"

    - name: Ensure pipx path
      ansible.builtin.shell: "{{ pyenv_python_executable.stdout }} -m pipx ensurepath"
      register: pipx_installed

- name: Setup Poetry
  when: pipx_installed is defined and pipx_installed.rc == 0
  block:
    - name: Check if poetry is installed
      ansible.builtin.shell: command -v $HOME/.local/bin/poetry >/dev/null 2>&1
      register: poetry_installed
  rescue:
    - name: Install Poetry
      ansible.builtin.shell: "{{ pyenv_python_executable.stdout }} -m pipx install poetry"

    - name: Ensure poetry defaults
      ansible.builtin.shell: |
        "{{ poetry_executable }}" completions bash >> ~/.bash_completion
        "{{ poetry_executable }}" config virtualenvs.in-project true
        "{{ poetry_executable }}" config virtualenvs.prefer-active-python true
      register: poetry_installed